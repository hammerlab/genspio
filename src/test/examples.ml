
open Nonstd
module String = Sosa.Native_string

let downloader () =
  let open Genspio.EDSL in
  let sayf ?(strings = []) fmt =
    ksprintf (fun s ->
        let say ?(prompt = false) s =
          let prompt =
            if prompt then "downloader: " else "            " in
          call (string "printf"
                :: string (prompt ^ "%s\\n")
                :: s :: []) in
        seq (say ~prompt:true (string s) :: List.map strings ~f:say)
      ) fmt in
  let failf fmt = ksprintf (fun s -> seq [sayf "ERROR: %s" s; fail]) fmt in
  let (//) = Filename.concat in
  let silence ~name unit =
    let stdout = "/tmp" // sprintf "output-of-%s-%s" name "-out" in
    let stderr = "/tmp" // sprintf "output-of-%s-%s" name "-err" in
    seq [
      sayf "Silent %s (%s, %s)" name stdout stderr;
      write_output unit ~stdout ~stderr;
    ] in
  let download ~url ~output =
    switch [
      exec ["wget"; "--help"] |> silence ~name:"wget-help" |> succeeds,
      seq [
        sayf "Using WGET.";
        call [
          string "wget"; url; string "--output-document"; output;
        ];
      ];
      exec ["curl"; "--help"] |> silence ~name:"curl-help" |> succeeds,
      seq [
        sayf "Using CURL.";
        call [
          string "curl"; url; string "--output"; output;
        ];
      ];
    ]
      ~default:(failf "Can't find a downloading application")
  in
  let string_matches_any string regexp_list =
    (* Cf. http://pubs.opengroup.org/onlinepubs/009695399/utilities/grep.html *)
    let options = List.concat_map regexp_list ~f:(fun r -> ["-e"; r]) in
    string >> exec (["grep"; "-q"] @ options) |> succeeds in
  let string_concat sl =
    let out s = call [string "printf"; string "%s"; s] in
    seq (List.map sl ~f:out) |> output_as_string in
  parse_command_line
    Option_list.(
      string ~doc:"The URL to the stuff" 'u'
      & usage "$0 -u URL"
    )
    begin fun url ->
      let filename =
        url >> exec ["sed"; "s:.*/\\([^\\?\\/]*\\)\\?.*:\\1:"] |> output_as_string in
      let tmpdir = "/tmp/genspio-downloader" in
      let output_of_download =
        string_concat [string tmpdir; string "/"; filename] in
      seq [
        exec ["mkdir"; "-p"; tmpdir];
        if_then_else
          (string_matches_any url ["^http://"; "^https://"; "^ftp://"])
          (seq [
              download ~url ~output:output_of_download;
              sayf "Downloaded " ~strings:[output_of_download];
            ])
          (failf "URL not in Http(s) or FTP: NOT IMPLEMENTED")
      ]
    end


let () =
  match Sys.argv |> Array.to_list |> List.tl_exn with
  | "dl" :: path :: [] ->
    let script = Genspio.Language.to_many_lines (downloader ()) in
    let content =
      sprintf
        "#!/bin/sh\n\n# Generated by Genspio Example Tests\n\n%s\n%!" script in
    begin match path with
    | "-" -> printf "\n`````\n%s`````\n%!" content
    | other ->
      let o = open_out other in
      fprintf o "%s%!" content;
      close_out o
    end
  | other ->
    eprintf "Wrong command line: [%s]\n"
      (List.map ~f:(sprintf "%S") other |> String.concat ~sep:"; ");
    eprintf "Usage:\n\
             %s dl <path>\n\
            \   Create the downloader script.\n%!" Sys.argv.(0);
    exit 1
