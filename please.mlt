#use "tools/please_lib.ml";;

let version = "0.0.2-dev";;

let main_libs = ["nonstd"; "sosa"];;

let toplevel_merlin = Merlin.lines ~s:["."; "tools"] ~pkg:main_libs ();;

let meta_content =
  String.concat ~sep:"\n"
    [ "(** Metadata Module Generated by the Build System *)"
    ; ""
    ; sprintf "let version = %S" version ];;

let files =
  let open File in
  let open Jbuilder in
  [ file ".merlin" toplevel_merlin
  ; file "src/lib/jbuild"
    @@ jbuild
         [ rule ~targets:["meta.ml"] [write_file "meta.ml" meta_content]
         ; lib "genspio" ~deps:main_libs ]
  ; file "src/test-lib/jbuild"
    @@ jbuild
         [lib "tests" ~deps:("genspio" :: "uri" :: main_libs) ~internal:true]
  ; file "src/test/jbuild"
    @@ jbuild [executable "main" ~libraries:("genspio" :: "tests" :: main_libs)]
  ; file "src/examples/jbuild"
    @@ jbuild
         [ executable ~single_module:true "downloader"
             ~libraries:("genspio" :: main_libs)
         ; executable ~single_module:true "vm_tester"
             ~libraries:("genspio" :: main_libs)
         ; executable ~single_module:true "service_composer"
             ~libraries:("genspio" :: main_libs)
         ; executable ~single_module:true "small"
             ~libraries:("genspio" :: main_libs)
         ; rule ~targets:["small_examples.ml"] ~deps:["small.exe"]
             [sprintf "(run ./small.exe small_examples.ml)"]
         ; executable ~single_module:true "small_examples"
             ~libraries:("genspio" :: "tests" :: main_libs) ]
  ; repo_file "genspio.opam"
      Opam.(
        make "genspio" ~opam_version:"1.2"
          ~maintainer:"Seb Mondet <seb@mondet.org>"
          ~homepage:"https://github.com/hammerlab/genspio"
          ~license:"Apache 2.0" ~version ~ocaml_min_version:"4.03.0"
          ~deps:
            ( Opam.dep
                ~qualify:(`Version (`GT, "1.0+beta20"))
                ~build:true "jbuilder"
            :: List.map main_libs ~f:dep )) ];;

let describe _ =
  print_endline
    "Genspio is a typed EDSL to generate shell scripts and commands from OCaml.\n\n\
     The idea is to build values of type `Genspio.EDSL.t` with the\n\
     combinators in the `Genspio.EDSL` module, and compile them to POSIX\n\
     shell scripts (or one-liners) with functions from `Genspio.Compile`.\n\n\
     Genspio's documentation root is at \
     <https://smondet.gitlab.io/genspio-doc/>.\n";;

let () = Main.make ~files ~describe ~version:(fun _ -> print_endline version) ()
